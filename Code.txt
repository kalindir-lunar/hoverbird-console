using System; 
using System.Linq;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using Internal; 
 
namespace BirdsWayConsole; 
 
public static class Program 
{
    private static bool _initGame = false;
    private static bool _gameRun = false;
    private static string _starBrick = "*";
    private static ConsoleKey _lastInputKey;
    private static int _gameScore = 0;
    // private static bool _birdWay;

    public static void Main()
    {

        if (_initGame == false)
        {
            DrawGameField();
            _initGame = true; //Сделал initGame, чтоб один раз поле отрисовывать
            _gameRun = true;
        }

        while (_gameRun == true)
        {
            InputController(); //тут пока игра запущена, то управлять игрой, логично?
            // BirdFlyingOnGameField();
            DrawScore();
            // QuitGame();
        }
    }

    private static void DrawGameField()
    {
        Console.Clear();
        Console.SetBackgroundColor(50, 85, 120, 255); //сделал голубое небо

        for (int i = 0; i < 40; i++)
        {
            if (i == 0 || i == 39)
            {
                for (int j = 0; j < 30; j++)
                {
                    Console.Write(_starBrick.PadRight(2));
                }
                Console.Write(_starBrick);
                Console.WriteLine();
            }
            else if (i == 5)
            {
                Console.WriteLine(_starBrick + _gameScore.ToString().PadLeft(30) + _starBrick.PadLeft(30));
            }
            else
                Console.WriteLine(_starBrick + _starBrick.PadLeft(60));
        }
        Console.ResetColor();
        //Отрисовал поле и вернул цвет, чтоб следующие
    }

    private static void DrawScore()
    {
        Thread.Sleep(500);
        _gameScore++;
        Console.SetBackgroundColor(50, 85, 120, 255);
        //Console.SetCursorPosition(0, 4);
        //Console.Write(new string(' ', Console.WindowWidth));
        Console.SetCursorPosition(0, 5);
        Console.Write(_starBrick + _gameScore.ToString().PadLeft(30) + _starBrick.PadLeft(30));
        Console.ResetColor();
    }

    private async static Task InputController()
    {

        //Вот тут я застрял из-за того, что не находит KeyAvailable
        /*if (Console.KeyAvailable)
        {
            var key = Console.ReadKey(true);
            // Обработка нажатия клавиши
            Console.WriteLine(key.ToString());
        }*/

        /*_lastInputKey = Console.ReadKeyAsync().Result.Key;
        Console.SetCursorPosition(0, 41);
        Console.Write(new string(' ', Console.WindowWidth));
        await Task.Delay(100);*/
    }

    private static void BirdFlyingOnGameField()
    {
        while (_lastInputKey == ConsoleKey.None)
        {
            Console.WriteLine("Space");
        }
        if (_lastInputKey != ConsoleKey.None)
        {
            Console.SetBackgroundColor(140, 0, 0, 255);
            Console.WriteLine("NotSpace");
            Console.ResetColor();
        }
    }

    private static void QuitGame()
    {
        if (_lastInputKey == ConsoleKey.Q)
        {
            _gameRun = false;
            Console.WriteLine("Quit from the game.");
        }
    }
}